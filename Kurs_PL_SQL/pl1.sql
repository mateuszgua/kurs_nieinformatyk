-- nadanie niezbędnych uprawnień użytkownikowi sklep
      GRANT CREATE SEQUENCE TO SKLEP;
      ALTER USER SKLEP QUOTA 100M ON USERS;
-- tworzenie tabel

    DROP TABLE game_scores;
    DROP TABLE game_options;

    CREATE TABLE game_options 
    (
        id                         INTEGER         GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL PRIMARY KEY
      , correct_box         INTEGER         NOT NULL
      , user_choice         INTEGER         NOT NULL
      , change_decision VARCHAR2(1) NOT NULL
    )
    ;

    CREATE TABLE game_scores
    (  id                          INTEGER          GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL PRIMARY KEY
     , data                     TIMESTAMP    DEFAULT SYSTIMESTAMP NOT NULL
     , option_id              INTEGER          REFERENCES GAME_OPTIONS(ID)
     , user_choice_new INTEGER          NOT NULL
     , removed_box        INTEGER          NOT NULL
     , prize                      VARCHAR2(1)  NOT NULL
    )
    ;
    
-- zapisanie wszystkich możliwych kombinacji gry
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (1, 1, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (1, 1, 'T');

      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (1, 2, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (1, 2, 'T');

      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (1, 3, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (1, 3, 'T');



      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (2, 1, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (2, 1, 'T');

      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (2, 2, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (2, 2, 'T');

      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (2, 3, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (2, 3, 'T');



      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (3, 1, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (3, 1, 'T');

      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (3, 2, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (3, 2, 'T');

      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (3, 3, 'N');
      INSERT INTO game_options (correct_box, user_choice, change_decision) VALUES (3, 3, 'T');

      COMMIT;

-- testy tabeli opcji

        -- ile razy każda ze skrzynek jest wygraną
        SELECT correct_box
             , COUNT(*)
          FROM game_options
          GROUP BY correct_box;
         
        -- ile razy użytkownik w pierwszym kroku wybierał dane skrzynki 
        SELECT user_choice
             , COUNT(*)
          FROM game_options
          GROUP BY user_choice;
          
          -- ile razy użytkownik zmieniał decyzję
          SELECT change_decision
             , COUNT(*)
          FROM game_options
          GROUP BY change_decision;

-- mechanizm rozgrywki
          DECLARE
              v_removed_box       INTEGER;
              v_user_choice_new INTEGER;
              v_prize                     VARCHAR2(1);
          BEGIN
             
             FOR i IN (SELECT  id
                                         , correct_box
                                         , user_choice
                                         , change_decision
                              FROM game_options)
             LOOP
                 FOR j IN 1..10000 LOOP
                 
                  -- prowadzący usuwa jedno z pudełek
                   LOOP        
                      v_removed_box := ROUND(dbms_random.value(1,3));
                      
                      IF v_removed_box<>i.correct_box AND v_removed_box<>i.user_choice THEN
                        EXIT;
                      END IF;
                      
                   END LOOP;
                   /*
                   dbms_output.put_line(        i.id
                                     ||', '||i.correct_box
                                     ||', '||i.user_choice
                                     ||', '||v_removed_box); 
                     */
             
                     -- czy użytkownik zmienia decyzję?
                     IF i.change_decision = 'T' THEN
                     
                         IF 1 <> v_removed_box AND 1 <> i.user_choice THEN
                           v_user_choice_new := 1;
                         ELSIF 2 <> v_removed_box AND 2 <> i.user_choice THEN
                           v_user_choice_new := 2;
                         ELSE 
                           v_user_choice_new := 3;
                         END IF;
                      
                     ELSE
                          v_user_choice_new := i.user_choice;
                     END IF;
                     
                     
                     /*
                        dbms_output.put_line(        i.id
                                     ||', '||i.change_decision
                                     ||', '||i.user_choice
                                     ||', '||v_user_choice_new);

                     */
                     
                     -- czy użytkownik wybrał poprawnie     
                     IF v_user_choice_new = i.correct_box THEN
                        v_prize := 'Y';
                     ELSE
                        v_prize := 'N';
                     END IF;
                     
                     -- zapisz wyniki
                     INSERT INTO game_scores(option_id, user_choice_new, removed_box, prize) 
                          VALUES (i.id, v_user_choice_new, v_removed_box, v_prize);
                          
                     COMMIT;
                     
                   END LOOP;
                 
              END LOOP;
              
              
          END;


-- testy poprawnego działania mechanizmu
      
             -- ile razy przy wariancie zmiana decyzji nie zmieniliśmy skrzynki
             SELECT COUNT(*)
              FROM game_scores gs
              INNER JOIN game_options go
                            ON gs.option_id = go.id
           WHERE go.change_decision = 'Y'
                AND go.user_choice = gs.user_choice_new;
            
             -- ile razy przy wariancie brak zmiany decyzji zmieniliśmy skrzynki
             SELECT COUNT(*)
              FROM game_scores gs
              INNER JOIN game_options go
                            ON gs.option_id = go.id
           WHERE go.change_decision = 'N'
                AND go.user_choice <> gs.user_choice_new;

             -- ile razy usuneliśmy nieistniejącą skrzynkę
             SELECT COUNT(*)
              FROM game_scores gs
              INNER JOIN game_options go
                            ON gs.option_id = go.id
            WHERE gs.removed_box NOT IN (1, 2, 3);
            
              -- ile razy wybraliśmy nieistniejącą skrzynkę
             SELECT COUNT(*)
              FROM game_scores gs
              INNER JOIN game_options go
                            ON gs.option_id = go.id
            WHERE gs.user_choice_new NOT IN (1, 2, 3);
            
               -- ile razy nie przyznaliśmy nagrody za prawidłową skrzynkę
             SELECT COUNT(*)
              FROM game_scores gs
              INNER JOIN game_options go
                            ON gs.option_id = go.id
            WHERE gs.user_choice_new = go.correct_box
                AND gs.prize = 'N';
              
              -- ile razy  przyznaliśmy nagrodę za nieprawidłową skrzynkę
            SELECT COUNT(*)
              FROM game_scores gs
              INNER JOIN game_options go
                            ON gs.option_id = go.id
            WHERE gs.user_choice_new <> go.correct_box
                AND gs.prize = 'Y';
                
           -- ile razy wybraliśmy w drugim kroku nieistniejącą skrzynkę
            SELECT COUNT(*)
             FROM game_scores gs
             INNER JOIN game_options go
                           ON gs.option_id = go.id
            WHERE gs.user_choice_new = gs.removed_box;
      
           -- ile razy usuneliśmy niedozwoloną skrzynkę
            SELECT COUNT(*)
             FROM game_scores gs
            INNER JOIN game_options go
                          ON gs.option_id = go.id
          WHERE gs.removed_box = go.user_choice
                 OR gs.removed_box = gs.user_choice_new
                 OR gs.removed_box = go.correct_box; 

        -- ile razy testowaliśmy każdy wariant
            SELECT option_id, COUNT(*)
              FROM game_scores
            GROUP BY option_id
            ORDER BY option_id;
            
          -- ile razy użytkownik wybierał w drugim kroku każdą ze skrzynek
            SELECT user_choice_new, COUNT(*)
              FROM game_scores
            GROUP BY user_choice_new
            ORDER BY user_choice_new;
            
          -- ile razy prowadzący usuwał każdą ze skrzynek
           SELECT removed_box, COUNT(*)
              FROM game_scores
            GROUP BY removed_box
            ORDER BY removed_box;
            
         -- ile razy rozgrywka kończyła się zwycięstwem, porażką
           SELECT prize, COUNT(*)
              FROM game_scores
            GROUP BY prize
            ORDER BY prize;

-- obliczenie szans na zwycięstwo
      SELECT GO.change_decision
                    , SUM(CASE 
                                   WHEN gs.prize = 'Y' THEN 1
                                   ELSE 0
                                END
                               ) score
      FROM game_scores gs
      INNER JOIN game_options go
                           ON GS.option_id = go.id
      GROUP BY go.change_decision;
